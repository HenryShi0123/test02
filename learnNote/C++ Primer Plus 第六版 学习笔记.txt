
C++的三种编程方式：
	1. 面向过程的编程方式
	2. 面向对象的编程方式
	3. 模板支持的泛型编程
	
计算机语言要处理的两个概念：
	数据  数据就是程序使用和处理的信息
	算法  算法是程序使用的方法
	
C语言编程原理（面向过程的编程）
	过程性就意味着强调编程的算法方面。
	结构化编程
	自顶而下的设计。将大型程序分解成小型、便于管理的任务。
	
面向对象编程（OOP）
	OOP强调的是数据，试图让语言类满足温度要求，
	类是一种规范，描述了这种新型数据格式，对象是根据这种规范构造的特性数据结构。
	通常类规定了可使用那些数据来表示对象以及可以对这些数据执行那些操作。
	OOP程序设计方法首先设计类，它们准确的表示了程序要处理的东西。然后便可以设计一个使
用这些类的对象的程序。
	OOP还有助于创建可重用的代码。信息隐藏可以保护数据，使其避免不适当的访问。多态可以
为运算符和函数创建多个定义，通过编程上下文来确定使用哪个定义。继承可以使用旧类派生出
新类。

C++和泛型编程
	重用代码和抽象通用概念。泛型编程强调的是独立于特性数据类型。泛型指的是的独立与类
型的代码。

C++语法要求main（）函数的定义以函数头 int main()开始。
	
C++注释
	//
	/*......*/
	注释的目的不仅仅在于帮助他人理解代码，更有助于程序员自己理解代码。
	
C++预处理器和iostream文件
	如果程序要使用C++输入或输出工具，必须使用下面两行代码：
	#include <iostream>
	using namespace std;

	声明语句和变量。
		int i;
	赋值语句
		将值赋给存储单元。
		int i;//变量声明语句
		i = 2;//赋值语句。
		
输入输出流
	cout << "this is a print function!" << 1 << endl;
	int value;
	cin >> value;
	
函数格式
	type functionname(argumentlist)
	{
		statements;
	}
	
第三章 处理数据
	3.1 简单变量
		3.1.1 变量名：
			1. 在名称中只能使用字母，数字，下划线
			2. 名称的第一个字符不能是数字
			3. 区分大写字符与小写字符。也就是说大小写字符分别代表不同意义
			4. 不能将C++关键字用作名称
			5. 以两个下划线或下划线和大写字母打头的名称被保留实现（编译器及其使用的
			资源―）使用。以一个下划线 开头的名称被保留给实现，用作全局标识符。
			6. C++对于名称的长度没有限制，名称中所有的字符都有意义，但是有些平台有
			长度限制。
		3.1.2 整型
			short 		至少16位
			int			至少与short一样长
			long		至少32位，且至少与int一样长
			long long   至少64位，且至少与long一样长
			
			可以使用sizeof运算符来计算类型或变量的长度，单位是字节。
			头文件climits中包含了关于整型限制的信息.如整型的最大值INT_MAX
			
			1. 变量初始化
				将赋值与声明合并在一起。如：
					int iInt = INT_MAX.
			2. C++11 初始化方式
				int hamburgers = {24}; //set hamburgers to 24
				int enum{7};           //set enum to 7
				int rheas = {12};	   //set rheas to 12
				int rocs{};		       //set rocs to 0
				int psychics = {};	   //set psychics to 0 
			3.1.4 无符号类型
			    用关键字unsigned修饰的基本整形就是无符号类型。无符号类型的数值范围是从0到最大值。
			        unsigned int a;
			        unsigned short b;
			        unsigned long c;
			        unsigned long long d;
			        unsigned e;
			    其中unsigned本身就是unsigned int的缩写。
			3.1.5 如何选择整形类型
			    一般选择int类型。但是如果所要表示的数值大小超出int的最大值，则应该选择long 或long 
			long，如果考虑要节省内存，则应该用跟小的short或char型。
			3.1.6 整形字面值
			    整形字面值（常量）是显示地书写的常量。
			3.1.7 常量的后缀
			    l或L  表示该整数为long
			    u或U  表示unsigend int常量
			    ul    大小写都行表示unsigned long
			    ULL   C++11 中表示unsigned long long
			3.1.8 char类型
			    char类型，转为存储字符设计，也可以用来存比short更小的整形。
			    
			    cout.put()函数，该函数显示一个字符。
			3.1.9 bool类型
			    bool类型只有两个值：true 和 false
			
		3.2 const 限定符
		    使用const关键字来修改声明和初始化，可以使一个变量不变成常量。
		    const int i = 12；//定义了一个常量，值是12
		3.3 浮点数
		    double 
		    float 
		    3.3.1 书写浮点数
		        1.2
		        3.2
		        3.2e6; //3.2 * 10^6
		        3.2e-4;//3.2 *10^-6
		    3.3.2 浮点类型
		        float
		        double
		        long double
		3.4 C++算术运算符
		    + - * / %
		    3.4.1 运算符优先级和结核性
		        先乘除，后加减 当两个运算符的优先级相同时，c++将依据操作数的结合性来进行计算。
		    3.4.2 求模运算符 %
		    3.4.4 类型转换
		        自动转换
		        将一种算术类型的值赋给另一种算术类型的变量时，C++将对值进行转换
		        表达式中包含不同的类型时，C++将对值进行转换
		        将参数传递给函数时，C++将对值进行转换。
		        1. 初始化和赋值进行的转换。
		            将一个值赋给取值范围更大的类型通常不会导致问题，但是反之则不然。
		        2. 以{}方式初始化时进行的转换（C++11）
		            使用大括号的初始化称为列表初始化，因为这种初始化常用于给复杂的数据类型提供值列表。列表
		        初始化不允许缩窄。例如：不允许将浮点数转换为整形。
		        3. 表达式中的转换
		            1. 如果有一个操作数的类型是long double ，则将另一个操作数转换为long double
		            2. 否则，如果有一个操作数的类型是double，则将另一个操作数转换为double
		            3. 否则，如果有一个操作数的类型是float，则将另一个操作数转换为float
		            4. 否则，说明操作数都是整形，因此执行整形提升。
		            5. 在这种情况下，如果两个操作数都是有符号或无符号的，且其中一个操作数的级别比另一个低，则
		        转换位级别高的类型。
		            6. 如果一个操作数是有符号的，另一个操作数是无符号的，且无符号操作数的级别比有符号操作数
		        高，则将有符号操作数转换为无符号操作数所属的类型。
		            7. 否则，如果有符号零星可表示无符号类型的所有可能取值，则将无符号数转换为有符号数操作数
		        所属的类型。
		            8. 否则，将两个操作数都转换为有符号类型的无符号版本。
		        4 传递参数是的转换
		            
		        5 强制类型转换。
		            强制类型转换有两种格式：
		                (long) thorn; // return a type long conversion of thorn 
		                long (thorn); // return a type long conversion of thorn
		   3.4.5 C++ 11中的auto声明
第4章 复合类型
    创建和使用数组
    创建和使用C风格字符串
    创建和使用string类字符串
    使用方法getline（）和get（）读取字符串
    混合输入字符串和数字
    创建和使用结构
    创建和使用共用体。
    创建和使用枚举
    创建和使用指针
    使用new和delete管理动态内存
    创建动态数组
    创建动态结构
    自动存储，静态存储和动态存储
    vector和array类简介。
    4.1 数组
        数组的声明应指出以下三点：
            1. 存储在每个元素中的值的类型
            2. 数组名
            3. 数组中的元素数
        声明数组的通用格式如下：
        typename arrayName[arraySize];             
        对数组元素的访问的方法是使用下标或索引来对元素进行编号。从0开始。
        4.1.2 数组的初始化规则
            只有在定义数组时才能使用初始化，不能将一个数组赋给另一个数组。
            int cards[4] = {3, 6, 8, 9}; //okey
            int hand[4];                 //okey
            hand[4] = {5, 6, 7, 9};      // not allowed
            hand = cards;                // not allowed
            初始化数组时，提供的值可以少于数组的元素数目。如果只对数组的一部分进行初始化，则编译器把其他元素
        设置位0.可以将数组中所有的元素都初始化位0.
            float hotelTips[5] = {4.4, 2.3};
        long  totals[500] = {0};
        4.1.3 C++数组初始化方法
            C++11 将使用大括号的初始化作为一种通用初始化方式，可用于所有类型。
            1 初始化数组时，可以省略等号
                double earnings[4]{1.23e4, 1.6e4, 1.1e4, 1.7e4};
            2 可以不在大括号内包含任何东西，这将把所有元素都设置成0
                unsigned int counts[10] = {};
                float balances[100]{};
            3 列表初始化禁止缩窄转换
	4.2 字符串
		字符串是存储在内存的连续字节中的一系列字符。C++处理字符串的方式有两种。第一
	中来自C语言，称为C风格字符串，另一种基于string类库的方法。
		C风格字符串以空字符结尾，空字符被写作 \0.
		
		char cat[8]   = {'f', 'a', 't', 'e', 's', 's', 'a', '\0'};
		char bird[11] = "Mr. Cheeps";
		char fish[]   = "Bubbles";
		用引号括起来的字符串隐式的包括结尾的空字符。
		4.2.1 拼接字符串常量
			任何两个由空白（空格、制表符和换行符）分割的字符串常量都将自动拼接成一个
		。因此下面两句等效：
			cout << "I`d give my right arm to be" " a great violinist.\n";
			cout << "I`d give my right arm to be a great violinist.\n";
			cout << "I`d give my right ar"
			"m to be a great violinist.\n";
		4.2.2 在数组中使用字符串
			要将字符串存储到数组中，最常用的方法：
			1. 将数组初始化为字符串常量
			2. 将键盘或文件输入读到数组中。
			char name1[15];
			char name2[15] = "Henry";
			
			cin >> name1;
		4.2.3 字符串输入
			cin >> name;
			cin使用空白（空格、制表符和换行符）来确定字符串的结束为止，即cin获取字符
		数组输入时，只能读取一个单词。
		4.2.4 每次读取一行字符串输入
			面向行的类成员函数：getline() 和 get().这两个函数都读取一行输入，直到
		换行符。getline将丢弃换行符，而get()将换行符保留在输入序列中。
			1. 面向行的输入：getline（）
			getline()函数读取整行，它使用通过回车键输入的换行符来确定输入结尾。
			用法： cin.getline();
			两个参数，第一个用来存储输入行的数组的名称，第二个是要读取的字符数。
				cin.getline(name, 30);
			2. 面向行的输入: get()
				get()众多用法中的一种和getline(void *, int)相似，但是get()不会丢弃换
			换行符。
				使用cin.get()必须注意换行符，可以用cin.get()来获取但不保存换行符。这
			样程序运行就不会有问题。
				cin.get(name.20).get();//后面的get()调用是为了去除换行符对程序的影响
			3. 空行和其他问题
				get()读取空行后将设置失效位，阻断记下来的读取。可以用cin.clear()来恢
			复输入。
		4.2.5 混合输入字符串和数字
			int year;
			cin >> year;
	4.3 string类简介。
		要使用string类，必须包含头文件：
			#include <string>
		string 类是一种用来表达字符串的类型，提供字符串的各种操作。
			string str1;
			string str2 = "panther";
			程序会自动调整str的长度。
		4.3.1 C++11字符串初始化
			可以使用列表初始化的方法初始化C-风格字符串和string对象。
			char first_data[] = {"Le chapon Dodu"};
			char second_data[]{"The Elegant Plate"};
			string third_data = {"The Bread Bowl"};
			string fourth_data{"Hank`s Fine Eats"};
		4.3.2 赋值，拼接和附加
			可以将一个string对象赋给另一个string对象。
			string str1;
			string str2 = {"panther"};
			str1 = str2;
			
			合并两个字符串
			string str3;
			str3 = str1 + str2;
			str3 += str1;
		4.3.3 string类的其他操作
			cstring头文件
			int len1 = str1.size();
			int len2 = strlen(charr1);
		4.3.4 string 类I/O
		    